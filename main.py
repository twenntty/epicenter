import os
import telebot
from telebot import types
from aiohttp import web
import sqlite3
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = '7253772078:AAGI3pDm0Wc9CL3cIPCWTDpbqcmMnO7qV30'
ADMIN_ID = 558372164

bot = telebot.TeleBot(TOKEN)
admin_state = {}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('database.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                      id INTEGER PRIMARY KEY,
                      username TEXT,
                      action TEXT
                  )''')

cursor.execute('''CREATE TABLE IF NOT EXISTS appointments (
                      user_id INTEGER,
                      username TEXT,
                      requested_time TEXT,
                      status TEXT,
                      reason TEXT
                  )''')

cursor.execute('''CREATE TABLE IF NOT EXISTS subscribers (
                      user_id INTEGER PRIMARY KEY
                  )''')
conn.commit()

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
app = web.Application()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram
async def handle(request):
    json_str = await request.text()
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return web.Response(text='OK')


app.router.add_post(f'/{TOKEN}', handle)


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
def set_webhook():
    render_url = os.environ.get("RENDER_EXTERNAL_URL", "").rstrip('/')
    if not render_url.startswith("https://"):
        render_url = f"https://{render_url}"
    webhook_url = f"{render_url}/{TOKEN}"
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞: {webhook_url}")
    bot.remove_webhook()
    bot.set_webhook(url=webhook_url)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(commands=['start'])
def welcome(message):
    user_id = message.chat.id
    username = message.from_user.username
    cursor.execute('INSERT OR REPLACE INTO users (id, username) VALUES (?, ?)', (user_id, username))
    conn.commit()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üß¥ –ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ—Å–º–µ—Ç–∏–∫—É"),
        types.KeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è"),
        types.KeyboardButton("üì¨ –†–æ–∑—Å–∏–ª–∫–∞"),
        types.KeyboardButton("üóïÔ∏è –ó–∞–ø–∏—Å –Ω–∞ –ø—Ä–∏–π–æ–º"),
        types.KeyboardButton("üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É"),
        types.KeyboardButton("‚ùå –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–∫–∏")
    ]

    if user_id == ADMIN_ID:
        buttons.append(types.KeyboardButton("/admin"))

    markup.add(*buttons)
    bot.send_message(user_id, "–í—ñ—Ç–∞—é –≤ –±–æ—Ç—ñ –ï–ø—ñ—Ü–µ–Ω—Ç—Ä! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == "üß¥ –ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ—Å–º–µ—Ç–∏–∫—É")
def order_cosmetics(message):
    user_id = message.chat.id
    cursor.execute('UPDATE users SET action = ? WHERE id = ?', ('ordering_cosmetics', user_id))
    conn.commit()
    bot.send_message(user_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ—Å–º–µ—Ç–∏–∫–∏, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏:")


@bot.message_handler(func=lambda msg: msg.text == "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è")
def request_consultation(message):
    user_id = message.chat.id
    bot.send_message(user_id,
                     "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @manager_username")


@bot.message_handler(func=lambda msg: msg.text == "üóïÔ∏è –ó–∞–ø–∏—Å –Ω–∞ –ø—Ä–∏–π–æ–º")
def book_appointment(message):
    user_id = message.chat.id
    cursor.execute('UPDATE users SET action = ? WHERE id = ?', ('booking_appointment', user_id))
    conn.commit()
    bot.send_message(user_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –ø—Ä–∏–π–æ–º:")


@bot.message_handler(func=lambda msg: msg.text == "üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É")
def subscribe(message):
    user_id = message.chat.id
    cursor.execute('INSERT OR IGNORE INTO subscribers (user_id) VALUES (?)', (user_id,))
    conn.commit()
    bot.send_message(user_id,
                     "–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É! –í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.")


@bot.message_handler(func=lambda msg: msg.text == "‚ùå –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–∫–∏")
def unsubscribe(message):
    user_id = message.chat.id
    cursor.execute('DELETE FROM subscribers WHERE user_id = ?', (user_id,))
    conn.commit()
    bot.send_message(user_id, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–∫–∏.")


@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.chat.id == ADMIN_ID:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        btn2 = types.KeyboardButton("üì¨ –†–æ–∑—Å–∏–ª–∫–∞")
        btn3 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞ –≥–æ–ª–æ–≤–Ω—É")
        markup.add(btn1, btn2, btn3)
        bot.send_message(ADMIN_ID, "–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == "‚Ü©Ô∏è –ù–∞ –≥–æ–ª–æ–≤–Ω—É")
def back_to_main(message):
    welcome(message)


@bot.message_handler(func=lambda msg: msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_stats(message):
    if message.chat.id == ADMIN_ID:
        cursor.execute('SELECT COUNT(*) FROM users')
        users_count = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM subscribers')
        subs_count = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM appointments WHERE status = "pending"')
        pending_appointments = cursor.fetchone()[0]

        stats = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {users_count}\n"
            f"üîî –ü—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤: {subs_count}\n"
            f"‚è≥ –û—á—ñ–∫—É—é—Ç—å –æ–±—Ä–æ–±–∫–∏: {pending_appointments}"
        )

        bot.send_message(ADMIN_ID, stats)


@bot.message_handler(func=lambda msg: msg.text == "üì¨ –†–æ–∑—Å–∏–ª–∫–∞")
def send_newsletter(message):
    if message.chat.id == ADMIN_ID:
        bot.send_message(ADMIN_ID, "–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º:")
        admin_state[ADMIN_ID] = 'sending_newsletter'


@bot.message_handler(func=lambda msg: admin_state.get(msg.chat.id) == 'sending_newsletter')
def handle_newsletter(message):
    if message.chat.id == ADMIN_ID:
        newsletter_text = message.text
        cursor.execute('SELECT user_id FROM subscribers')
        subscribers = cursor.fetchall()

        success = 0
        failed = 0

        for subscriber in subscribers:
            user_id = subscriber[0]
            try:
                bot.send_message(user_id, newsletter_text)
                success += 1
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {e}")
                failed += 1

        bot.send_message(ADMIN_ID, f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n–£—Å–ø—ñ—à–Ω–æ: {success}\n–ù–µ –≤–¥–∞–ª–æ—Å—è: {failed}")
        admin_state[ADMIN_ID] = None


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_id = message.chat.id
    cursor.execute('SELECT action FROM users WHERE id = ?', (user_id,))
    user_action = cursor.fetchone()

    if user_action and user_action[0] == 'ordering_cosmetics':
        cursor.execute('INSERT INTO appointments (user_id, username, requested_time, status) VALUES (?, ?, ?, ?)',
                       (user_id, message.from_user.username, message.text, 'pending'))
        conn.commit()
        cursor.execute('UPDATE users SET action = ? WHERE id = ?', (None, user_id))
        conn.commit()
        bot.send_message(user_id, "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
        bot.send_message(ADMIN_ID, f"üß¥ –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –∫–æ—Å–º–µ—Ç–∏–∫—É –≤—ñ–¥ @{message.from_user.username}:\n{message.text}")

    elif user_action and user_action[0] == 'booking_appointment':
        cursor.execute('INSERT INTO appointments (user_id, username, requested_time, status) VALUES (?, ?, ?, ?)',
                       (user_id, message.from_user.username, message.text, 'pending'))
        conn.commit()
        cursor.execute('UPDATE users SET action = ? WHERE id = ?', (None, user_id))
        conn.commit()
        bot.send_message(user_id, "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–ø–∏—Å! –ú–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–º–æ –≤–∞—à—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
        bot.send_message(ADMIN_ID, f"üóì –ù–æ–≤–∏–π –∑–∞–ø–∏—Å –≤—ñ–¥ @{message.from_user.username}:\n{message.text}")


@bot.message_handler(commands=['pdecline'])
def decline_appointment(message):
    if message.chat.id != ADMIN_ID:
        return
    try:
        parts = message.text.split()
        user_id = int(parts[1])
        reason = ' '.join(parts[2:]) or '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏'
        cursor.execute('UPDATE appointments SET status = ?, reason = ? WHERE user_id = ? AND status = ?',
                       ('declined', reason, user_id, 'pending'))
        conn.commit()
        bot.send_message(user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        bot.send_message(ADMIN_ID, "–ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
    except Exception as e:
        bot.send_message(ADMIN_ID, f"–ü–æ–º–∏–ª–∫–∞: {e}")


@bot.message_handler(commands=['pconfirm'])
def confirm_appointment(message):
    if message.chat.id != ADMIN_ID:
        return
    try:
        parts = message.text.split()
        user_id = int(parts[1])
        cursor.execute('UPDATE appointments SET status = ? WHERE user_id = ? AND status = ?',
                       ('confirmed', user_id, 'pending'))
        conn.commit()
        bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫.")
        bot.send_message(ADMIN_ID, f"–ó–∞—è–≤–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.")
    except Exception as e:
        bot.send_message(ADMIN_ID, f"–ü–æ–º–∏–ª–∫–∞: {e}")



if __name__ == '__main__':
    set_webhook()
    web.run_app(app, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))